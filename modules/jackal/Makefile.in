# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998-2007 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# *************** <auto-copyright.pl END do not edit this line> ***************

# -----------------------------------------------------------------------------
# Base Makefile.in for JCCL.  It requires GNU make.
#
# Generated for use on @PLATFORM@
# -----------------------------------------------------------------------------
# Targets are:
#
# world           - Build and install everything.
# world-all-abi   - Build and install everything using all supported ABIs.
# buildworld      - Build everything (same as 'all').
# installworld    - Install everything (same as 'install-all').  This requires 
#                   that 'buildworld' be successfully completed beforehand.
# release         - Build and install a release version.
#
# all             - Build everything.
# all-abi         - Build everything using all supported ABIs.
# debug           - Build the JCCL libraries (dynamic and static) with
#                   debugging symbols turned on.
# dbg             - Build the debugging, static copy of the libraries.
# ddso            - Build the debugging, dynamic shared object version of the
#                   libraries.
# optim           - Build the JCCL libraries (dynamic and static) with
#                   optimization flags enabled.
# opt             - Build the optimized, static version of the libraries.
# dso             - Build the dynamic shared object version of the libraries.
# obj             - Build the object files using the default value for
#                   $(OBJDIR).
#
# links           - Define links (for developer use only) that provide
#                   functionality allowing the use of the $TWEEK_BASE_DIR
#                   environment variable.
# clean-links     - Remove the symlinks created by 'links'.
#
# hier            - Make the full directory hierarchy for the installation.
# install-all     - Install all versions of the libraries, all header files,
#                   and the test code.
# install-all-abi - Install every ABI possible on the target platform.
# install         - Install the full debugging version of JCCL (with both
#                   static and dynamic libraries). 
# install-debug   - Same as 'install'.
# install-dbg     - Install the debugging, static version of the libraries.
# install-ddso    - Install the debugging, dynamic shared object version of
#                   the libraries.
# install-optim   - Install the full optimized version of JCCL (with both
#                   static and dynamic libraries).
# install-opt     - Install the optimized, static version of the libraries.
# install-dso     - Install the dynamic shared object version of the libraries.
# install-headers - Install only the header files.
# install-test    - Install only the test code.
#
# docs            - Build the internal and the public documentation.
# doc-internal    - Build only the internal documentation.
# doc-public      - Build only the public documentation.
#
# clean           - Clean up everything (uses common 'clean' target).
# cleandepend     - Clean up the dependency files (uses common 'cleandepend'
#                   target).
# clobber         - Clean up everything and remove the directories containing
#                   the compiled libraries and its object files.
#
# info            - Print out information about the build process that may be
#                   useful to the user.
#
# The default target is 'debug'.  'install' will install the debugging, static
# version of the libraries.
# -----------------------------------------------------------------------------

default: debug

# This is a hack to deal with GNU make's ignorance about defined targets.
# Without this, the 'default' set in dpp.subdir.mk becomes the default
# target, and that's not what we want.
DEFAULT_SET=	1

# Include common definitions.
include @topdir@/make.defs.mk

STARTTIME:=	$(shell LC_TIME=C date)

BUILD_CXX=	@BUILD_CXX@
BUILD_PROF_C=	@BUILD_PROF_C@
BUILD_PROF_CXX=	@BUILD_PROF_CXX@

# If we can build both C and C++ profiled objects, we will build profiled
# libraries.
ifeq ($(BUILD_PROF_C), Y)
ifeq ($(BUILD_PROF_CXX), Y)
   BUILD_PROF_LIBS=	1
endif
endif

# =============================================================================
# Lists used for various types of recursion.
# =============================================================================

# Subdirectories used for recursion through the source tree.
SUBDIR=	common config editors rtrc

# =============================================================================
# Library targets.  The default is 'debug' as defined above.
# =============================================================================

# ------------------------------------------------
# Build and install everything (i.e., the world).
# ------------------------------------------------
world:
	@echo "==============================================================="
	@echo ">>> JCCL make world started $(STARTTIME)"
	@echo "==============================================================="
ifndef NO_CLEAN
	@$(MAKE) clobber
endif
	@$(MAKE) $(BEFOREBUILD)
	@$(MAKE) libs build-java
	@$(MAKE) BUILD_TYPE=all $(AFTERBUILD)
	@echo "---------------------------------------------------------------"
	@echo "Beginning JCCL installation process"
	@echo "---------------------------------------------------------------"
	@$(MAKE) beforeinstall
	@$(MAKE) install-libs
	@$(MAKE) do-post-install
	@echo "==============================================================="
	@echo ">>> JCCL make world started $(STARTTIME)"
	@echo ">>> JCCL make world completed `LTIME=C date`"
	@echo "==============================================================="

# ------------------------------------------------------------------------
# Build and install everything (i.e., the world) using all possible ABIs.
# ------------------------------------------------------------------------
world-all-abi:
	@echo "==============================================================="
	@echo ">>> JCCL make world started on $(STARTTIME)"
	@echo "==============================================================="
ifndef NO_CLEAN
	@$(MAKE) clobber
endif
	@$(MAKE) $(BEFOREBUILD)
	@for abi in $(ABI_LIST) ; do					\
            echo "------------------------------------------------" ;	\
            echo "Building libraries using $$abi" ;			\
            echo "------------------------------------------------" ;	\
            $(MAKE) jcclABI=$$abi libs ;				\
          done
	@$(MAKE) BUILD_TYPE=all $(AFTERBUILD)
	@echo "---------------------------------------------------------------"
	@echo "Beginning JCCL installation process"
	@echo "---------------------------------------------------------------"
	@$(MAKE) beforeinstall
	@for abi in $(ABI_LIST) ; do					\
            echo "------------------------------------------------" ;	\
            echo "Installing $$abi version of libraries" ;		\
            echo "------------------------------------------------" ;	\
            $(MAKE) jcclABI=$$abi install-libs ;			\
          done
	@$(MAKE) do-post-install
	@echo "==============================================================="
	@echo ">>> JCCL make world started on $(STARTTIME)"
	@echo ">>> JCCL make world completed on `LTIME=C date`"
	@echo "==============================================================="

# -----------------------------------------------------------------------------
# A release is a superset of 'world' except that no profiled libraries are
# built.  Beyond this, the change log, release notes, etc. are installed.
# A special case is required for releases made in the "global" build.  Namely,
# the developer installation ("instlinks") must be created so that subsequent
# targets can find headers properly.
# -----------------------------------------------------------------------------
release:
	@echo "==============================================================="
	@echo ">>> JCCL make release started on $(STARTTIME)"
	@echo "==============================================================="
ifndef NO_CLEAN
	@$(MAKE) clobber
endif
	@$(MAKE) $(BEFOREBUILD)
	@$(MAKE) BUILD_PROF_C=N BUILD_PROF_CXX=N libs build-java
	@$(MAKE) BUILD_TYPE=opt $(AFTERBUILD)
	@echo "---------------------------------------------------------------"
	@echo "Beginning JCCL release installation process"
	@echo "---------------------------------------------------------------"
	@$(MAKE) beforeinstall
	@$(MAKE) BUILD_PROF_C=N BUILD_PROF_CXX=N install-libs
	@$(MAKE) BUILD_PROF_C=N BUILD_PROF_CXX=N do-post-install
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(EXTRA_INSTALL_ARGS) $(JCCLROOT_ABS)/ChangeLog $(projdatadir)
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(EXTRA_INSTALL_ARGS) $(JUGGLERROOT_ABS)/COPYING.txt $(projdatadir)
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(EXTRA_INSTALL_ARGS) $(JCCLROOT_ABS)/README.txt $(projdatadir)
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(EXTRA_INSTALL_ARGS) $(JCCLROOT_ABS)/INSTALL.txt $(projdatadir)
	$(INSTALL) -m $(FILE_PERMS) $(GROUP_OPT_UNIX)			\
          $(EXTRA_INSTALL_ARGS) $(JCCLROOT_ABS)/RELEASE_NOTES.txt $(projdatadir)
	@echo "Build time: `LTIME=C date`" > $(projdatadir)/BUILD_TIME
	@echo "==============================================================="
	@echo ">>> JCCL make release started on $(STARTTIME)"
	@echo ">>> JCCL make release completed on `LTIME=C date`"
	@echo "==============================================================="

# -------------------------------------
# Build all versions of the libraries.
# -------------------------------------
buildworld: all

# ------------------------------------------------------------------------
# Do a full installation all versions of the libraries and the associated
# files.
# ------------------------------------------------------------------------
installworld: install-all

.PHONY: test

PROCS=	1

# =============================================================================
# Human-readable information about the build system.
# =============================================================================
info:
	@echo "\nInfo for the make of JCCL"
	@echo "\nOBJDIR: $(OBJDIR)"
	@echo "JCCLROOT_ABS: $(JCCLROOT_ABS)"
	@echo "Default ABI: $(ABI)"
	@echo "Default instruction set architecture: $(ISA)"
	@echo "ABI list: $(ABI_LIST)"
	@echo "DBG_BUILDDIR: $(DBG_BUILDDIR)"
	@echo "OPT_BUILDDIR: $(OPT_BUILDDIR)"
	@echo "Installation prefix: $(prefix)"
	@echo "includedir: $(includedir)"
	@echo "libdir: $(libdir)"
	@$(SHELL) $(scriptdir)/print-targets.sh

include $(MKPATH)/dpp.subdir.mk
include Makefile.inc
