# ***************** <VPR heading BEGIN do not edit this line> *****************
#
# VR Juggler Portable Runtime
#
# Original Authors:
#   Allen Bierbaum, Patrick Hartling, Kevin Meinert, Carolina Cruz-Neira
#
# ****************** <VPR heading END do not edit this line> ******************

# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998-2007 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# *************** <auto-copyright.pl END do not edit this line> ***************

default: debug

# This is a hack to deal with GNU make's ignorance about defined targets.
# Without this, the 'default' set in dpp.subdir.mk becomes the default
# target, and that's not what we want.
DEFAULT_SET=	1

# Set to "Y" to enable usage of the qt test runner
USE_QTRUNNER=	N

include test.defs.mk

BUILD_PROF_C=	@BUILD_PROF_C@
BUILD_PROF_CXX=	@BUILD_PROF_CXX@

# If we can build both C and C++ profiled objects, we will build a profiled
# application.
ifeq ($(BUILD_PROF_C), Y)
ifeq ($(BUILD_PROF_CXX), Y)
   BUILD_PROF_APP=	1
endif
endif

CPPUNIT_LINK_FLAGS = @CPPUNIT_LDFLAGS@ @LIBCPPUNIT@

#
# Add on stuff for qt
#
ifeq ($(USE_QTRUNNER), Y)
   EXTRA_CXXFLAGS+=	-DUSE_QT_TESTRUNNER
   EXTRA_INCLUDES+=	-I$(QTDIR)/include
   CPPUNIT_LINK_FLAGS+=	-lqttestrunner
endif

# -----------------------------------------------------------------------------
# Inital options, commands, etc.
# -----------------------------------------------------------------------------
APP_NAME=	runner
#APP_PROF_EXT=	_p
APP=		$(APP_NAME)$(EXEEXT)
APP_PROF=	$(APP_NAME)$(APP_PROF_EXT)$(EXEEXT)
builddir=	$(test_topdir)
srcdir=		@srcdir@
topdir=		@topdir@

DBG_FLAGS=	-D_DEBUG @DBG_FLAGS@
OPT_FLAGS=	-D_OPT -DNDEBUG @OPT_FLAGS@

LINK_FLAGS=	@APP_LINK_FLAGS@ $(EXTRA_LFLAGS)
EXTRA_LFLAGS=	@APP_EXTRA_LFLAGS@ $(DEBUG_LFLAGS)
DEBUG_LFLAGS=	@APP_DEBUG_LFLAGS@
OPTIM_LFLAGS=	@APP_OPTIM_LFLAGS@
LINK=		@APP_LINK@ $(LINK_FLAGS)
LINKALL_ON=	@APP_LINKALL_ON@
LINKALL_OFF=	@APP_LINKALL_OFF@
LIBRARY_VERSION=@LIBRARY_VERSION@

# -----------------------------------------------------------------------------
# Build stuff.
# -----------------------------------------------------------------------------
SRCS=		main.cpp
ALL_OBJS=	$(OBJDIR)/*.@OBJEXT@
SUBDIR=		TestCases

# -----------------------------------------------------------------------------
# Linking stuff.
# -----------------------------------------------------------------------------
LIBS=		$(shell flagpoll vpr --libs) $(CPPUNIT_LINK_FLAGS)

ifneq (@OS_TYPE@, Win32)
LIBS+=	-lm
endif

$(APP): $(ALL_OBJS)
	$(LINK) @EXE_NAME_FLAG@ $(ALL_OBJS) $(LDFLAGS) $(LIBS)

#$(APP_PROF): $(ALL_OBJS)
#	$(LINK) @EXE_NAME_FLAG@ $(ALL_OBJS) $(LDFLAGS) $(BASIC_LIBS)	\
#          $(EXTRA_LIBS)

include $(MKPATH)/dpp.simple-app.mk
include $(MKPATH)/dpp.subdir.mk

CLEAN_DIRS+=	obj
CLOBBER_FILES+=	$(APP) $(DEPEND_FILES)

-include $(DEPEND_FILES)
