# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# VR Juggler is (C) Copyright 1998-2007 by Iowa State University
#
# Original Authors:
#   Allen Bierbaum, Christopher Just,
#   Patrick Hartling, Kevin Meinert,
#   Carolina Cruz-Neira, Albert Baker
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# *************** <auto-copyright.pl END do not edit this line> ***************

# -----------------------------------------------------------------------------
# Makefile.in for tweek/java.  It requires GNU make.
#
# Generated for use on @PLATFORM@
# -----------------------------------------------------------------------------

default: all

# Include common definitions.
include @topdir@/make.defs.mk
include @topdir@/java.defs.mk

srcdir=			@srcdir@
top_srcdir=		@top_srcdir@

EXTRA_SRCS_PATH=	$(srcdir)/../tweek/idl
EXTRA_JAVA_SRCS_PATH=	$(IDL_GENDIR)/tweek $(KUNSTSTOFF_SRCDIR)
IDL_GENDIR=		.
INSTALL=		@INSTALL@
INSTALL_FILES=		
JAVA_IDL_OPTS=		@JAVA_IDL_OPTS@ @JAVA_IDL_GENDIR_OPT@$(IDL_GENDIR)
JAVA_IDL_INCLUDES=	@JAVA_IDL_INCFLAG@$(top_srcdir)
JAVA_IDL_CLIENT_OPTS=	@JAVA_IDL_CLIENT_OPTS@
JAVA_IDL_SERVER_OPTS=	@JAVA_IDL_SERVER_OPTS@

LAF_DIR=		$(JUGGLERROOT_ABS)/external/swing-laf
KUNSTSTOFF_SRCDIR=	$(LAF_DIR)/kunststoff/sources
JAVA_SRC_PATH=		$(KUNSTSTOFF_SRCDIR)

JDOM_DIR=		$(JUGGLERROOT_ABS)/external/jdom
JDOM_JARS=		$(JDOM_DIR)/build/jdom.jar		\
			$(JDOM_DIR)/lib/jaxen-core.jar		\
			$(JDOM_DIR)/lib/jaxen-jdom.jar		\
			$(JDOM_DIR)/lib/saxpath.jar		\
			$(JDOM_DIR)/lib/xalan.jar		\
			$(JDOM_DIR)/lib/xerces.jar		\
			$(JDOM_DIR)/lib/xml-apis.jar

JAVA_ORB_JAR=	@JAVA_ORB_JAR@

#SKIN_LAF_DIR=	$(LAF_DIR)/skinlf/lib
#SKIN_LAF_JARS=	$(SKIN_LAF_DIR)/skinlf.jar$(JCPS)$(SKIN_LAF_DIR)/themepack.zip
LIQUID_JAR=	$(LAF_DIR)/liquid/liquidlnf.jar
METOUIA_JAR=	$(LAF_DIR)/metouia/metouia.jar
JGOODIES_JAR=	$(LAF_DIR)/jgoodies-looks/looks.jar

LAF_JARS=	$(LIQUID_JAR)$(JCPS)$(METOUIA_JAR)$(JCPS)$(JGOODIES_JAR)

IDL_JAVA_FILES=	SubjectManager.java		\
		Subject.java			\
		Observer.java			\
		BeanDeliverySubject.java

JARS=		Tweek.jar		\
		TweekBeans.jar		\
		TweekEvents.jar		\
		TweekNet.jar		\
		TweekBeanDelivery.jar	\
		TweekServices.jar	\
		kunststoff-mod.jar
BEANS=		Viewers

_LOCAL_CLEAN=		_clean
JAVA_AFTERBUILD=	java_afterbuild

BUILD_JNI=		@BUILD_JNI@

ifeq (@PLATFORM@, Darwin)
   JNILIB_EXT=		jnilib

ifeq ($(ISA), universal)
   JNI_ABI_FLAGS=	$(foreach arch,$(UNIVERSAL_ARCH_LIST),-arch $(arch)) \
			$(PLATFORM_SDK)
endif
else
   JNILIB_EXT=		@DYNAMICLIB_EXT@
endif

JNI_CFLAGS=		$(JNI_INC) $(CFLAGS_DYNLIB) $(JNI_ABI_FLAGS)
JNI_LDFLAGS=		@JNI_LDFLAGS@ $(JNI_LIB)
TWEEK_JNI_LIB=		@LIB_PREFIX@tweek_jni.$(JNILIB_EXT)

ARCH=			@target_cpu@

include $(MKPATH)/dpp.obj.mk

# -----------------------------------------------------------------------------
# Uses ant to build the java classes and JARs
# -----------------------------------------------------------------------------
java_afterbuild:
	@echo "------------------------------------------------"
	@echo "Building java sources"
	@echo "------------------------------------------------"
	$(ANT)
ifeq ($(BUILD_JNI), Y)
	$(MAKE) $(TWEEK_JNI_LIB)
endif

_clean:
	$(ANT) clean
	rm -f jni_getenv.$(OBJEXT) $(TWEEK_JNI_LIB)

# -----------------------------------------------------------------------------
# JNI targets.  These are simple because they can be.
# -----------------------------------------------------------------------------
jni_getenv.$(OBJEXT): $(srcdir)/jni/jni_getenv.c
	$(CC) $(JNI_CFLAGS) -c $(srcdir)/jni/jni_getenv.c

$(TWEEK_JNI_LIB): jni_getenv.$(OBJEXT)
	$(C_DLL) $(DYLIB_NAME_FLAG) jni_getenv.$(OBJEXT) $(JNI_LDFLAGS)

# -----------------------------------------------------------------------------
# Extra targets.
# -----------------------------------------------------------------------------
Subject.java: Subject.idl
	$(JAVA_IDL) $(JAVA_IDL_OPTS) $(JAVA_IDL_CLIENT_OPTS)		\
          $(JAVA_IDL_INCLUDES) $<

SubjectManager.java: SubjectManager.idl
	$(JAVA_IDL) $(JAVA_IDL_OPTS) $(JAVA_IDL_CLIENT_OPTS)		\
          $(JAVA_IDL_INCLUDES) $<

ifeq (@JAVA_IDL_NAME@, IDLJ)
Observer.java: Observer.idl
	$(JAVA_IDL) $(JAVA_IDL_OPTS) $(JAVA_IDL_SERVER_OPTS)		\
          $(JAVA_IDL_INCLUDES) $<
endif

# This cannot be named 'install' because Doozer++ already defines that.
tweek-install:
	@echo "------------------------------------------------"
	@echo "Installing the Tweek Java code base"
	@echo "------------------------------------------------"
ifeq (@OS_TYPE@, UNIX)
	$(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(EXEC_PERMS)		\
          $(GROUP_OPT_UNIX) $(topdir)/java/tweek.sh			\
          $(bindir)/tweek
	$(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(FILE_PERMS)		\
          $(GROUP_OPT_UNIX) $(topdir)/java/tweek-base.sh		\
          $(bindir)/tweek-base.sh
else
	$(INSTALL) -m $(EXEC_PERMS) $(GROUP_OPT_UNIX)			\
          $(TWEEKROOT_ABS)/java/tweek.bat $(bindir)/tweek.bat
endif	# if OS_TYPE == UNIX
	$(SHELL) $(MKINSTALLDIRS) $(projdatadir)
	$(MTREE_CMD) -Ude -f $(mtreedir)/TWEEK.java.dist -p $(projdatadir)
	$(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(FILE_PERMS)		\
          $(GROUP_OPT_UNIX) $(srcdir)/java.security.policy.txt $(javadir)
	$(SHELL) $(MKINSTALLDIRS) $(javadir)/$(ARCH)
ifeq ($(BUILD_JNI), Y)
	$(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(EXEC_PERMS)		\
          $(GROUP_OPT_UNIX) $(topdir)/java/$(TWEEK_JNI_LIB)		\
          $(javadir)/$(ARCH)
endif
	for jar in $(JARS) ;						\
          do								\
              $(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(FILE_PERMS)		\
                $(GROUP_OPT_UNIX) $(topdir)/java/$$jar $(javadir) ;	\
          done
	for bean in $(BEANS) ;						\
          do								\
              $(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(FILE_PERMS)		\
                $(GROUP_OPT_UNIX) $(topdir)/java/$$bean.jar $(beandir) ; \
              $(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(FILE_PERMS)		\
                $(GROUP_OPT_UNIX) $(top_srcdir)/java/$$bean.xml		\
                $(beandir) ;						\
          done
	for jar in $(JDOM_JARS) ;					\
          do								\
              $(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(FILE_PERMS)		\
                $(GROUP_OPT_UNIX) $$jar $(javadir) ;			\
          done
ifneq ($(JAVA_ORB_JAR), none)
	for jar in `echo "$(JAVA_ORB_JAR)" | sed -e 's/$(JCPS)/ /g'` ;	\
          do								\
              $(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(FILE_PERMS)		\
                $(GROUP_OPT_UNIX) $$jar $(javadir) ;			\
          done
endif
	for jar in `echo "$(LAF_JARS)" | sed -e 's/$(JCPS)/ /g'` ;	\
          do								\
              $(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(FILE_PERMS)		\
                $(GROUP_OPT_UNIX) $$jar $(javadir) ;			\
          done
ifeq (@PLATFORM@, Darwin)
	@echo "------------------------------------------------"
	@echo "Installing the Mac OS X Tweek application bundle"
	@echo "------------------------------------------------"
	$(SHELL) $(MKINSTALLDIRS) $(bundle_bindir)
	$(SHELL) $(MKINSTALLDIRS) $(bundle_javadir)
	$(SHELL) $(MKINSTALLDIRS) $(bundle_beandir)
	$(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(EXEC_PERMS)		\
          $(releasedir)/mac/JavaApplicationStub $(bundle_bindir)
	$(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(FILE_PERMS)		\
          $(topdir)/java/Info.plist $(bundleroot)/Contents
	$(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(FILE_PERMS)		\
          $(top_srcdir)/java/tweek.icns $(bundleroot)/Contents/Resources
	echo 'AAPL????' > $(bundleroot)/Contents/PkgInfo
	/Developer/Tools/SetFile -a B $(bundleroot)
	$(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(FILE_PERMS)		\
          $(GROUP_OPT_UNIX) $(srcdir)/java.security.policy.txt		\
          $(bundle_javadir)
ifeq ($(BUILD_JNI), Y)
	$(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(EXEC_PERMS)		\
          $(GROUP_OPT_UNIX) $(topdir)/java/$(TWEEK_JNI_LIB)		\
          $(bundle_javadir)
endif
	for jar in $(JARS) ;						\
          do								\
              $(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(FILE_PERMS)		\
                $(GROUP_OPT_UNIX) $(topdir)/java/$$jar			\
                $(bundle_javadir) ;					\
          done
	for jar in $(JDOM_JARS) ;					\
          do								\
              $(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(FILE_PERMS)		\
                $(GROUP_OPT_UNIX) $$jar $(bundle_javadir) ;		\
          done
	for bean in $(BEANS) ;						\
          do								\
              $(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(FILE_PERMS)		\
                $(GROUP_OPT_UNIX) $(topdir)/java/$$bean.jar		\
                $(bundle_beandir) ;					\
              $(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(FILE_PERMS)		\
                $(GROUP_OPT_UNIX) $(top_srcdir)/java/$$bean.xml		\
                $(bundle_beandir) ;					\
          done
	for jar in `echo "$(LAF_JARS)" | sed -e 's/$(JCPS)/ /g'` ;	\
          do								\
              $(INSTALL) $(EXTRA_INSTALL_ARGS) -m $(FILE_PERMS)		\
                $(GROUP_OPT_UNIX) $$jar $(bundle_javadir) ;		\
          done
endif

CLEAN_DIRS+=	tweek $(srcdir)/tweek

ifdef GLOBAL_BUILD
   CLEAN_DIRS+=	$(top_srcdir)/bin
endif

include Makefile.inc
