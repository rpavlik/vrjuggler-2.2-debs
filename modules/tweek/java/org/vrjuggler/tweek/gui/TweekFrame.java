/*************** <auto-copyright.pl BEGIN do not edit this line> **************
 *
 * VR Juggler is (C) Copyright 1998-2007 by Iowa State University
 *
 * Original Authors:
 *   Allen Bierbaum, Christopher Just,
 *   Patrick Hartling, Kevin Meinert,
 *   Carolina Cruz-Neira, Albert Baker
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 *************** <auto-copyright.pl END do not edit this line> ***************/

package org.vrjuggler.tweek.gui;

import java.awt.*;
import java.awt.event.*;
import java.net.InetAddress;
import java.util.*;
import javax.swing.*;
import javax.swing.event.EventListenerList;
import javax.swing.filechooser.FileFilter;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.undo.UndoManager;
import org.vrjuggler.tweek.TweekCore;
import org.vrjuggler.tweek.beans.*;
import org.vrjuggler.tweek.beans.loader.BeanJarClassLoader;
import org.vrjuggler.tweek.event.*;
import org.vrjuggler.tweek.net.CommunicationEvent;
import org.vrjuggler.tweek.net.CommunicationListener;
import org.vrjuggler.tweek.net.corba.*;
import org.vrjuggler.tweek.services.*;
import org.vrjuggler.tweek.text.*;


/**
 * The mediator for the whole GUI.  This holds an instance of
 * org.vrjuggler.tweek.BeanContainer which in turn holds the JavaBeans loaded
 * at run time.  Events generated by this frame are dispatched to the Beans
 * through the org.vrjuggler.tweek.BeanContainer instance.
 *
 * @version $Revision$
 *
 * @see BeanContainer
 */
public class TweekFrame
   extends JFrame
   implements BeanFocusChangeListener
            , MessageAdditionListener
            , BeanInstantiationListener
            , GlobalPrefsUpdateListener
            , WindowListener
            , RegistrationListener
            , FileActionListener
            , UndoActionListener
{
   public TweekFrame(MessageDocument msgDocument)
   {
      setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
      addWindowListener(this);

      // This needs to be done as early as possible so that we receive events
      // that happen during initialization.
      msgDocument.addMessageAdditionListener(this);
      mMsgDocument = msgDocument;

      String icon_name = "tweek-icon.gif";

      // Try to load an icon for this frame.
      try
      {
         ImageIcon icon = new ImageIcon(TweekFrame.class.getResource(icon_name));
         this.setIconImage(icon.getImage());
      }
      catch (NullPointerException e)
      {
         mMsgDocument.printWarning("WARNING: Failed to load icon " +
                                   icon_name + "\n");
      }

      mBeanPrefsDialog =
         new BeanPrefsDialog(this, "Bean-Specific Preferences Editor");

      // Before we register ourselves as a listener for Bean instatiation
      // events, query the list of existing Beans.  We need to make sure that
      // we know about any existing Beans that implement the BeanPreferences
      // interface.
      java.util.List known_beans =
         BeanRegistry.instance().getBeansOfType(TweekBean.class.getName());

      for ( Iterator i = known_beans.iterator(); i.hasNext(); )
      {
         checkObjectInterfaces(((TweekBean) i.next()).getBean());
      }

      BeanInstantiationCommunicator.instance().addBeanInstantiationListener(this);
      EventListenerRegistry.instance().addRegistrationListener(this);
   }

   /**
    * Sets the BeanViewer used to display the Bean heirarchy.
    */
   public void setBeanViewer (String viewer)
   {
      BeanRegistry registry = BeanRegistry.instance();

      // If a viewer string is valid, we'll try to find the Viewer Bean by
      // name.
      if ( viewer != null && ! viewer.equals("") )
      {
         mBeanViewer = (ViewerBean)registry.getBean( viewer );

         // If the by-name lookup was successful, we use the requested viewer.
         if ( mBeanViewer != null )
         {
            BeanModelViewer bv = mBeanViewer.getViewer();
            mBeanContainer.replaceViewer(bv);
         }
         // Otherwise, we fall back on the first Viewer Bean we know about.
         else
         {
            mMsgDocument.printWarning("WARNING: Unknown viewer type: '" + viewer + "'\n");
            loadFirstViewerBean();
         }
      }
      // If we do not have a viewer name, we'll just use the first one in the
      // collection of known Viewer Beans.
      else
      {
         loadFirstViewerBean();
      }
   }

   /**
    * Loads the first Viewer Bean in the collection of known Viewer Beans.  If
    * there are now Viewer Beans known, mBeanViewer will be set to null.
    */
   private void loadFirstViewerBean()
   {
      java.util.List viewers =
         BeanRegistry.instance().getBeansOfType(ViewerBean.class.getName());

      if ( viewers.size() > 0 )
      {
         mBeanViewer = (ViewerBean) viewers.get(0);
         mBeanContainer.replaceViewer((BeanModelViewer)mBeanViewer.getViewer() );

         try
         {
            GlobalPreferencesService prefs =
               new GlobalPreferencesServiceProxy();
            prefs.setBeanViewer(mBeanViewer.getName());
         }
         catch(java.io.IOException ex)
         {
            System.err.println("WARNING: No preferred viewer Bean can be loaded");
            System.err.println(ex.getMessage());
         }
         catch(RuntimeException ex)
         {
            System.err.println("WARNING: No preferred viewer Bean can be loaded");
            System.err.println(ex.getMessage());
         }
      }
      else
      {
         mMsgDocument.printWarning("WARNING: No Viewer Beans loaded");
         mBeanViewer = null;
      }
   }

   public ViewerBean getBeanViewer()
   {
      return mBeanViewer;
   }

   /**
    * Initializes the GUI.
    *
    * Pre-condition: The JavaBean search has been performed.
    */
   public void initGUI()
   {
      mMessagePanel = new MessagePanel(mMsgDocument);

      try
      {
         jbInit();
         mMenuEditPrefsBean.setEnabled(mBeanPrefsDialog.getPrefsBeanCount() > 0);

         if ( mMacOS )
         {
            try
            {
               ClassLoader loader = getClass().getClassLoader();
               String class_name = "org.vrjuggler.tweek.mac.TweekAppListener";
               final Class mac_app_class = loader.loadClass(class_name);
               java.lang.reflect.Constructor[] ctors =
                  mac_app_class.getConstructors();
               mMacAppListener = ctors[0].newInstance(new Object[] {this});
            }
            catch(InstantiationException e)
            {
               e.printStackTrace();
            }
            catch(ClassNotFoundException e)
            {
               e.printStackTrace();
            }
         }
         else
         {
            setMnemonics();
         }
      }
      catch (Exception e)
      {
         e.printStackTrace();
      }

      // Validate frames that have preset sizes.
      // Pack frames that have useful preferred size info, e.g. from their
      // layout.
      if ( mPackFrame )
      {
         this.pack();
      }
      else
      {
         this.validate();
      }

      this.setVisible(true);
   }

   /**
    * Handles a BeanFocusChangeEvent.  The change in Bean focus gives us the
    * opportunity to manipulate context-specific (Bean-specific) information.
    * This includes context-specific file loading.  When a new Bean is focuesd,
    * it is queried to determine if it implements
    * <code>org.vrjuggler.tweek.beans.FileLoader</code>.  If so, the Open item
    * in the File menu is enabled, and the newly focused Bean is set up to
    * receive open requests from the GUI.
    *
    * @since 0.92.7
    */
   public void beanFocused(BeanFocusChangeEvent e)
   {
      mMsgDocument.printStatus("Bean " + e.getBean() + " focused!\n");

      Object panel_bean = e.getBean().getBean();

      // If the Panel Bean supports file opening, enable mMenuFileOpen and
      // set the Bean as the current file loader.  If and when the user
      // selects the Open item in the File menu, panel_bean will be informed
      // of the open request via the FileLoader interface.
      if ( panel_bean instanceof FileLoader )
      {
         FileLoader loader = (FileLoader) panel_bean;
         mMenuFileOpen.setText("Open " + loader.getFileType() + " ...");
         mMenuFileClose.setText("Close " + loader.getFileType());
         mMenuFileOpen.setEnabled(true);
         boolean save_enabled = (loader.canSave() &&
                                 loader.hasUnsavedChanges());

         mMenuFileSave.setEnabled(save_enabled);
         mMenuFileSaveAll.setEnabled(save_enabled);

         if ( loader.getOpenFileCount() > 0 )
         {
            mMenuFileSaveAs.setEnabled(loader.canSave());
            mMenuFileClose.setEnabled(true);
         }
         else
         {
            mMenuFileSaveAs.setEnabled(false);
            mMenuFileClose.setEnabled(false);
         }

         mFileLoader = loader;
      }
      // This new Bean can't open files, we we make sure to disable the
      // Open menu item.
      else
      {
         disableFileHandlingItems();
      }

      if ( panel_bean instanceof ClipboardUser )
      {
         mMenuEditCut.setEnabled(true);
         mMenuEditCopy.setEnabled(true);
         mMenuEditPaste.setEnabled(true);

         mClipboardUser = (ClipboardUser) panel_bean;
      }
      else
      {
         disableClipboardItems();
      }

      if ( panel_bean instanceof UndoHandler )
      {
         mUndoHandler = (UndoHandler) panel_bean;
         UndoManager mgr = mUndoHandler.getUndoManager();

         if ( null == mgr )
         {
            mMenuEditUndo.setEnabled(false);
            mMenuEditRedo.setEnabled(false);
         }
         else
         {
            mMenuEditUndo.setEnabled(mgr.canUndo());
            mMenuEditRedo.setEnabled(mgr.canRedo());
         }
      }
      else
      {
         disableUndoHandlerItems();
      }

      if ( panel_bean instanceof HelpProvider )
      {
         HelpProvider help_bean = (HelpProvider) panel_bean;
         String help_desc = help_bean.getHelpDescription();

         if ( help_desc == null || help_desc.equals("") )
         {
            help_desc = e.getBean().getName() + " Help";
         }

         mMenuHelpBean.setText(help_desc);
         mMenuHelpBean.setEnabled(true);

         mHelpProvider = help_bean;
      }
      else
      {
         disableHelpProvidingItems();
      }
   }

   /**
    * Handles the case when the current Panel Bean is unfocused.  The file
    * handling menu items are disabled.
    *
    * @since 0.92.7
    */
   public void beanUnfocused(BeanFocusChangeEvent e)
   {
      mMsgDocument.printStatus("Bean " + e.getBean() + " unfocused!\n");

      // Disable the Open menu item in the File menu just to be safe.
      disableFileHandlingItems();
   }

   /**
    * Handles events from the message panel's document indicating that a new
    * message has been added.  Depending on the state of the message panel, the
    * button for opening and closing the panel is updated to reflect that a new
    * message is present.
    */
   public void messageAdded(MessageAdditionEvent e)
   {
      // If the message panel is closed, change mStatusMsgButton to indicate
      // that a new message has been added.
      if ( ! mMsgPanelExpanded )
      {
         if ( null != mBulbOnIcon )
         {
            mStatusMsgButton.setIcon(mBulbOnIcon);
         }
         else
         {
            mStatusMsgButton.setForeground(Color.red);
         }

         mStatusMsgLabel.setText("New message in message panel");
      }
   }

   /**
    * If the instantiated Bean implements the BeanPreferences interface, its
    * preferences are loaded, and its editor is added to the Bean-specified
    * editor dialog.
    */
   public void beanInstantiated(BeanInstantiationEvent e)
   {
      checkObjectInterfaces(e.getTweekBean().getBean());
   }

   public void listenerRegistered(RegistrationEvent e)
   {
      checkObjectInterfaces(e.getRegistrant());
   }

   public void listenerUnregistered(RegistrationEvent e)
   {
      Object obj = e.getRegistrant();
      if ( obj instanceof TweekFrameListener )
      {
         removeTweekFrameListener((TweekFrameListener) obj);
      }
   }

   /**
    * Handles individual updates to global preferences via the editor dialog.
    * At this time, this method does nothing.  At some point, it could be used
    * to provide immediate feedback to a user as he or she edits preferences
    * values.
    */
   public void globalPrefsModified(GlobalPrefsUpdateEvent e)
   {
   }

   public void globalPrefsSaved(GlobalPrefsUpdateEvent e)
   {
      try
      {
         GlobalPreferencesService prefs = new GlobalPreferencesServiceProxy();

         // Save this for later.
         int old_level = prefs.getUserLevel();

         String viewer = prefs.getBeanViewer();

         ViewerBean bean = (ViewerBean)BeanRegistry.instance().getBean(viewer);

         // Verify that the viewer lookup did not fail.
         // XXX: There should be a check here to compare the existing viewer
         // with the selected viewer.  If they are the same, do not do the
         // replacement.
         if ( null != bean )
         {
            mBeanContainer.replaceViewer(bean.getViewer());
         }

         String new_laf = prefs.getLookAndFeel();
         String old_laf = UIManager.getLookAndFeel().getName();

         if ( ! old_laf.equals(new_laf) )
         {
            try
            {
               UIManager.setLookAndFeel(new_laf);
               this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
               SwingUtilities.updateComponentTreeUI(this);

               // Update all the loaded Beans.
               java.util.List beans =
                  BeanRegistry.instance().getBeansOfType(PanelBean.class.getName());
               Iterator i = beans.iterator();
               PanelBean cur_bean;

               while ( i.hasNext() )
               {
                  cur_bean = (PanelBean) i.next();

                  if ( null != cur_bean.getComponent() )
                  {
                     SwingUtilities.updateComponentTreeUI(cur_bean.getComponent());
                  }
               }

               validate();
            }
            catch (Exception laf_e)
            {
               // Set the look and feel back to the old value because the
               // newly chosen setting isn't valid.
               prefs.setLookAndFeel(old_laf);
               prefs.save();
               JOptionPane.showMessageDialog(this,
                                             "Invalid look and feel '" +
                                                new_laf + "'",
                                             "Bad Look and Feel Setting",
                                             JOptionPane.ERROR_MESSAGE);
            }
            finally
            {
               this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
         }

         // If the user level changed, fire an event saying as much.
         if ( old_level != prefs.getUserLevel() )
         {
            mBeanContainer.fireUserLevelChange(old_level,
                                               prefs.getUserLevel());
         }

         // Handle resizing this frame if necessary.
         int window_width  = prefs.getWindowWidth();
         int window_height = prefs.getWindowHeight();

         Dimension cur_size = this.getSize();

         if ( cur_size.width != window_width ||
              cur_size.height != window_height )
         {
            this.setSize(window_width, window_height);
         }
      }
      catch(Exception ex)
      {
         // There is no need to do anything here.  If the GlobalPreferences
         // Bean is not available, the menu option will be disabled, thus
         // preventing this method from ever being executed.
      }
   }

   public void handleAbout()
   {
      helpAboutAction(null);
   }

   public void handleOpenFile()
   {
      fileOpenAction(null);
   }

   public void handlePrefs()
   {
      editGlobalPrefs(null);
   }

   public boolean handleQuit()
   {
      return fileQuitAction(null);
   }

   public synchronized void addTweekFrameListener(TweekFrameListener l)
   {
      mFrameListeners.add(TweekFrameListener.class, l);
   }

   public synchronized void removeTweekFrameListener(TweekFrameListener l)
   {
      mFrameListeners.remove(TweekFrameListener.class, l);
   }

   public void windowActivated(WindowEvent e)
   {
      fireFrameFocused(new TweekFrameEvent(e.getWindow(), e.getID(),
                                           e.getOppositeWindow()));
   }

   public void windowClosed(WindowEvent e)
   {
      fireFrameClosed(new TweekFrameEvent(e.getWindow(), e.getID()));
   }

   public void windowClosing(WindowEvent e)
   {
      if ( fireFrameClosing(new TweekFrameEvent(e.getWindow(), e.getID())) )
      {
         shutdown();
      }
   }

   public void windowDeactivated(WindowEvent e)
   {
      fireFrameUnfocused(new TweekFrameEvent(e.getWindow(), e.getID(),
                                             e.getOppositeWindow()));
   }

   public void windowDeiconified(WindowEvent e)
   {
      fireFrameDeiconified(new TweekFrameEvent(e.getWindow(), e.getID()));
   }

   public void windowIconified(WindowEvent e)
   {
      fireFrameIconified(new TweekFrameEvent(e.getWindow(), e.getID()));
   }

   public void windowOpened(WindowEvent e)
   {
      fireFrameOpened(new TweekFrameEvent(e.getWindow(), e.getID()));
   }

   public void fileOpenPerformed(FileActionEvent e)
   {
      mMenuFileClose.setEnabled(true);
      mMenuFileOpen.setEnabled(e.getFileLoader().canOpenMultiple());
      mMenuFileSaveAs.setEnabled(e.getFileLoader().canSave());
   }

   public void fileChangePerformed(FileActionEvent e)
   {
      if ( e.getFileLoader().hasUnsavedChanges() )
      {
         mMenuFileSave.setEnabled(true);
         mMenuFileSaveAll.setEnabled(true);
      }
   }

   public void fileSavePerformed(FileActionEvent e)
   {
      mMenuFileSave.setEnabled(false);
      mMenuFileSaveAll.setEnabled(e.getFileLoader().hasUnsavedChanges());
   }

   public void fileSaveAsPerformed(FileActionEvent e)
   {
      fileSavePerformed(e);
   }

   public void fileSaveAllPerformed(FileActionEvent e)
   {
      mMenuFileSave.setEnabled(false);
      mMenuFileSaveAll.setEnabled(false);
   }

   public void fileClosePerformed(FileActionEvent e)
   {
      mMenuFileOpen.setEnabled(true);

      if ( e.getFileLoader().getOpenFileCount() == 0 )
      {
         mMenuFileSave.setEnabled(false);
         mMenuFileSaveAs.setEnabled(false);
         mMenuFileSaveAll.setEnabled(false);
         mMenuFileClose.setEnabled(false);
      }
   }

   public void undoActionPerformed(UndoActionEvent e)
   {
      UndoManager mgr = e.getUndoHandler().getUndoManager();

      if ( null == mgr )
      {
         mMenuEditUndo.setEnabled(false);
         mMenuEditRedo.setEnabled(false);
      }
      else
      {
         mMenuEditUndo.setEnabled(mgr.canUndo());
         mMenuEditRedo.setEnabled(mgr.canRedo());
      }
   }

   // =========================================================================
   // Private methods.
   // =========================================================================

   /**
    * Checks the interfaces of the given object to determine what, if any,
    * interfaces it implements that are of interest to this class.
    */
   private void checkObjectInterfaces(Object obj)
   {
      if ( obj instanceof BeanPreferences )
      {
         addPrefsBean((BeanPreferences) obj);
         mMenuEditPrefsBean.setEnabled(true);
      }

      if ( obj instanceof TweekFrameListener )
      {
         addTweekFrameListener((TweekFrameListener) obj);
      }
   }

   private synchronized void fireFrameOpened(TweekFrameEvent e)
   {
      Object[] listeners = mFrameListeners.getListenerList();
      for (int i=listeners.length-2; i>=0; i-=2)
      {
         if (listeners[i] == TweekFrameListener.class)
         {
            ((TweekFrameListener)listeners[i+1]).frameOpened(e);
         }
      }
   }

   private synchronized void fireFrameClosed(TweekFrameEvent e)
   {
      Object[] listeners = mFrameListeners.getListenerList();
      for (int i=listeners.length-2; i>=0; i-=2)
      {
         if (listeners[i] == TweekFrameListener.class)
         {
            ((TweekFrameListener)listeners[i+1]).frameClosed(e);
         }
      }
   }

   private synchronized boolean fireFrameClosing(TweekFrameEvent e)
   {
      boolean result = true;
      Object[] listeners = mFrameListeners.getListenerList();
      for (int i=listeners.length-2; i>=0; i-=2)
      {
         if (listeners[i] == TweekFrameListener.class)
         {
            result = ( ((TweekFrameListener)listeners[i+1]).frameClosing(e) && result);
         }
      }

      return result;
   }

   private synchronized void fireFrameDeiconified(TweekFrameEvent e)
   {
      Object[] listeners = mFrameListeners.getListenerList();
      for (int i=listeners.length-2; i>=0; i-=2)
      {
         if (listeners[i] == TweekFrameListener.class)
         {
            ((TweekFrameListener)listeners[i+1]).frameDeiconified(e);
         }
      }
   }

   private synchronized void fireFrameFocused(TweekFrameEvent e)
   {
      Object[] listeners = mFrameListeners.getListenerList();
      for (int i=listeners.length-2; i>=0; i-=2)
      {
         if (listeners[i] == TweekFrameListener.class)
         {
            ((TweekFrameListener)listeners[i+1]).frameFocused(e);
         }
      }
   }

   private synchronized void fireFrameIconified(TweekFrameEvent e)
   {
      Object[] listeners = mFrameListeners.getListenerList();
      for (int i=listeners.length-2; i>=0; i-=2)
      {
         if (listeners[i] == TweekFrameListener.class)
         {
            ((TweekFrameListener)listeners[i+1]).frameIconified(e);
         }
      }
   }

   private synchronized void fireFrameUnfocused(TweekFrameEvent e)
   {
      Object[] listeners = mFrameListeners.getListenerList();
      for (int i=listeners.length-2; i>=0; i-=2)
      {
         if (listeners[i] == TweekFrameListener.class)
         {
            ((TweekFrameListener)listeners[i+1]).frameUnfocused(e);
         }
      }
   }

   /**
    * Adds the given Bean to the collection of Beans that have editable
    * preferences.
    *
    * @post The Bean's preferences are loaded, and it is added to the
    *       collection in the Bean preferences editor dialog.
    */
   private void addPrefsBean(BeanPreferences bean)
   {
      try
      {
         bean.load();
      }
      catch (java.io.IOException io_ex)
      {
         mMsgDocument.printWarning("Failed to load preferences for " +
                                   ((TweekBean) bean).getName() +
                                   ": " + io_ex.getMessage());
      }

      mBeanPrefsDialog.addPrefsBean(bean);
   }

   private void shutdown()
   {
      for ( int i = 0; i < mORBs.size(); i++ )
      {
         ((CorbaService) mORBs.elementAt(i)).shutdown(true);
      }

      // Note: When the last displayable window within the Java virtual
      //       machine (VM) is disposed of, the VM may terminate. See AWT
      //       Threading Issues for more information:
      //
      // http://java.sun.com/j2se/1.4.2/docs/api/java/awt/Window.html#dispose()
      // http://java.sun.com/j2se/1.4.2/docs/api/java/awt/doc-files/AWTThreadIssues.html
      // http://java.sun.com/docs/books/tutorial/uiswing/events/windowlistener.html 

      // A pause so user can see the message before the window actually
      // closes.
      ActionListener task = new ActionListener()
      {
         boolean alreadyDisposed = false;
         public void actionPerformed(ActionEvent e)
         {
            if (!alreadyDisposed)
            {
               alreadyDisposed = true;
               dispose();
            }
            else
            {
               // Make sure the program exits.
               System.exit(0);
            }
         }
      };

      // Fire every half second.
      javax.swing.Timer timer = new javax.swing.Timer(500, task);

      // First delay 2 seconds.
      timer.setInitialDelay(2000);
      timer.start();
   }

   /**
    * Performes the real GUI intialization.  This method is needed for JBuilder
    * to be happy.
    */
   private void jbInit() throws Exception
   {
      int shortcut_mask = Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();

      GlobalPreferencesService prefs = new GlobalPreferencesServiceProxy();
      setBeanViewer( prefs.getBeanViewer() );

      mContentPane = (JPanel) this.getContentPane();
      mContentPane.setLayout(mContentPaneLayout);
      this.setSize(new Dimension(prefs.getWindowWidth(),
                                 prefs.getWindowHeight()));
      this.setTitle("Tweek JavaBean Loader");

      // Define the Connect option in the Network menu.
      mMenuNetConnect.setText("Connect to ORB ...");
      mMenuNetConnect.setAccelerator(
         KeyStroke.getKeyStroke(KeyEvent.VK_C,
                                shortcut_mask | KeyEvent.SHIFT_MASK, false)
      );
      mMenuNetConnect.addActionListener(new ActionListener()
         {
            public void actionPerformed (ActionEvent e)
            {
               networkConnectAction(e);
            }
         });

      // Define the Disconnect option in the Network menu.
      mMenuNetDisconnect.setEnabled(false);
      mMenuNetDisconnect.setText("Disconnect from ORB ...");
      mMenuNetDisconnect.addActionListener(new ActionListener()
         {
            public void actionPerformed (ActionEvent e)
            {
               networkDisconnectAction(e);
            }
         });

      mMenuBeansLoad.setText("Load Beans ...");
      mMenuBeansLoad.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_B,
                                                           shortcut_mask,
                                                           false));
      mMenuBeansLoad.addActionListener(new ActionListener ()
         {
            public void actionPerformed (ActionEvent e)
            {
               beansLoadAction(e);
            }
         });

      mMenuBeansStatus.setText("Beans Status ...");
      mMenuBeansStatus.setAccelerator(
         KeyStroke.getKeyStroke(KeyEvent.VK_B,
                                shortcut_mask | KeyEvent.SHIFT_MASK, false)
      );
      mMenuBeansStatus.addActionListener(new ActionListener ()
         {
            public void actionPerformed (ActionEvent e)
            {
               beansStatusAction(e);
            }
         });

      if ( ! mMacOS )
      {
         // Define the About option in the Help menu.
         mMenuHelpAbout.setText("About ...");
         mMenuHelpAbout.addActionListener(new ActionListener ()
            {
               public void actionPerformed(ActionEvent e)
               {
                  helpAboutAction(e);
               }
            });
      }

      mMenuHelpBean.setEnabled(false);
      mMenuHelpBean.setText("Bean Help ...");
      mMenuHelpBean.addActionListener(new ActionListener ()
         {
            public void actionPerformed(ActionEvent e)
            {
               beanHelpAction(e);
            }
         });

      mMenuFileOpen.setText("Open ...");
      mMenuFileOpen.setEnabled(false);
      mMenuFileOpen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,
                                                          shortcut_mask,
                                                          false));
      mMenuFileOpen.addActionListener(new ActionListener()
      {
         public void actionPerformed(ActionEvent e)
         {
            fileOpenAction(e);
         }
      });

      mMenuFileClose.setEnabled(false);
      mMenuFileClose.setText("Close");
      mMenuFileClose.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,
                                                           shortcut_mask,
                                                           false));
      mMenuFileClose.addActionListener(new ActionListener()
      {
         public void actionPerformed(ActionEvent e)
         {
            fileCloseAction(e);
         }
      });

      // Define the Quit option in the File menu.
      if ( ! mMacOS )
      {
         mMenuFileQuit.setText("Quit");
         mMenuFileQuit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q,
                                                             shortcut_mask,
                                                             false));
         mMenuFileQuit.addActionListener(new ActionListener()
            {
               public void actionPerformed(ActionEvent e)
               {
                  fileQuitAction(e);
               }
            });
      }

      // Set up the File menu.  This adds the Open option, a separator, and
      // the Quit option.
      mMenuFile.setText("File");
      mMenuFileSave.setEnabled(false);
      mMenuFileSave.setText("Save");
      mMenuFileSave.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,
                                                          shortcut_mask,
                                                          false));
      mMenuFileSave.addActionListener(new ActionListener()
      {
         public void actionPerformed(ActionEvent e)
         {
            fileSaveAction(e);
         }
      });
      mMenuFileSaveAs.setEnabled(false);
      mMenuFileSaveAs.setText("Save As ...");
      mMenuFileSaveAs.addActionListener(new ActionListener()
      {
         public void actionPerformed(ActionEvent e)
         {
            fileSaveAsAction(e);
         }
      });
      mMenuFileSaveAll.setEnabled(false);
      mMenuFileSaveAll.setText("Save All");
      mMenuFileSaveAll.setAccelerator(
         KeyStroke.getKeyStroke(KeyEvent.VK_A,
                                shortcut_mask | KeyEvent.SHIFT_MASK, false)
      );
      mMenuFileSaveAll.addActionListener(new ActionListener()
      {
         public void actionPerformed(ActionEvent e)
         {
            fileSaveAllAction(e);
         }
      });
      mMenuFile.add(mMenuFileOpen);
      mMenuFile.add(mMenuFileSave);
      mMenuFile.add(mMenuFileSaveAs);
      mMenuFile.add(mMenuFileSaveAll);
      mMenuFile.add(mMenuFileClose);

      if ( ! mMacOS )
      {
         mMenuFile.addSeparator();
         mMenuFile.add(mMenuFileQuit);
      }

      mMenuEdit.setText("Edit");
      mMenuEditUndo.setEnabled(false);
      mMenuEditUndo.setText("Undo");
      mMenuEditUndo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z,
                                                          shortcut_mask,
                                                          false));
      mMenuEditUndo.addActionListener(new ActionListener()
      {
         public void actionPerformed(ActionEvent e)
         {
            editUndoAction(e);
         }
      });
      mMenuEditRedo.setEnabled(false);
      mMenuEditRedo.setText("Redo");
      mMenuEditRedo.setAccelerator(
         KeyStroke.getKeyStroke(KeyEvent.VK_Z,
                                shortcut_mask | KeyEvent.SHIFT_MASK, false)
      );
      mMenuEditRedo.addActionListener(new ActionListener()
      {
         public void actionPerformed(ActionEvent e)
         {
            editRedoAction(e);
         }
      });
      mMenuEditCut.setEnabled(false);
      mMenuEditCut.setText("Cut");
      mMenuEditCut.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,
                                                         shortcut_mask,
                                                         false));
      mMenuEditCut.addActionListener(new ActionListener()
      {
         public void actionPerformed(ActionEvent e)
         {
            editCutAction(e);
         }
      });
      mMenuEditCopy.setEnabled(false);
      mMenuEditCopy.setText("Copy");
      mMenuEditCopy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,
                                                          shortcut_mask,
                                                          false));
      mMenuEditCopy.addActionListener(new ActionListener()
      {
         public void actionPerformed(ActionEvent e)
         {
            editCopyAction(e);
         }
      });
      mMenuEditPaste.setEnabled(false);
      mMenuEditPaste.setText("Paste");
      mMenuEditPaste.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,
                                                           shortcut_mask,
                                                           false));
      mMenuEditPaste.addActionListener(new ActionListener()
      {
         public void actionPerformed(ActionEvent e)
         {
            editPasteAction(e);
         }
      });

      // Define the Edit Global option in the Preferences menu.
      if ( ! mMacOS )
      {
         boolean global_prefs_enabled = true;

         try
         {
            new GlobalPreferencesServiceProxy();
         }
         catch(Exception ex)
         {
            global_prefs_enabled = false;
         }

         mMenuEditPrefsGlobal.setText("Preferences ...");
         mMenuEditPrefsGlobal.setEnabled(global_prefs_enabled);
         mMenuEditPrefsGlobal.addActionListener(new ActionListener()
            {
               public void actionPerformed (ActionEvent e)
               {
                  editGlobalPrefs(e);
               }
            });
      }

      mMenuEditPrefsBean.setText("Bean-Specific Preferences ...");
      mMenuEditPrefsBean.setEnabled(false);
      mMenuEditPrefsBean.addActionListener(new ActionListener()
         {
            public void actionPerformed (ActionEvent e)
            {
               editBeanPrefs(e);
            }
         });

      // Set up the Edit menu.
      mMenuEdit.add(mMenuEditUndo);
      mMenuEdit.add(mMenuEditRedo);
      mMenuEdit.add(new JSeparator());
      mMenuEdit.add(mMenuEditCut);
      mMenuEdit.add(mMenuEditCopy);
      mMenuEdit.add(mMenuEditPaste);
      mMenuEdit.add(new JSeparator());

      if ( ! mMacOS )
      {
         mMenuEdit.add(mMenuEditPrefsGlobal);
      }

      mMenuEdit.add(mMenuEditPrefsBean);

      // Set up the Network menu.
      mMenuNetwork.setText("Network");
      mMenuNetwork.add(mMenuNetConnect);
      mMenuNetwork.add(mMenuNetDisconnect);

      // Set up the Beans menu.
      mMenuBeans.setText("Beans");
      mMenuBeans.add(mMenuBeansLoad);
      mMenuBeans.add(mMenuBeansStatus);

      // Add the About option to the Help menu.
      mMenuHelp.setText("Help");
      if ( ! mMacOS )
      {
         mMenuHelp.add(mMenuHelpAbout);
      }
      mMenuHelp.add(mMenuHelpBean);

      // Add the menus to the menu bar.
      mMenuBar.add(mMenuFile);
      mMenuBar.add(mMenuEdit);
      mMenuBar.add(mMenuNetwork);
      mMenuBar.add(mMenuBeans);
      mMenuBar.add(mMenuHelp);

      // Finally, set the menu bar to what we have just defined.
      this.setJMenuBar(mMenuBar);

      mMainPanel.setTopComponent(mBeanContainer);
      mMainPanel.setBottomComponent(null);
      mMainPanel.setOrientation(JSplitPane.VERTICAL_SPLIT);
      mMainPanel.setDividerSize(1);

      mStatusBar.setLayout(mStatusBarLayout);
      mStatusBar.setBorder(BorderFactory.createLoweredBevelBorder());
      mProgressBar.setMinimumSize(new Dimension(100, 14));
      mStatusMsgButton.setMinimumSize(new Dimension(24, 24));
      mStatusMsgButton.setToolTipText("Expand or collapse the message panel");

      String bulb_on_icon_name  = "org/vrjuggler/tweek/gui/bulb-on-small.gif";
      String bulb_off_icon_name = "org/vrjuggler/tweek/gui/bulb-off-small.gif";

      try
      {
         mBulbOnIcon = new ImageIcon(BeanJarClassLoader.instance().getResource(bulb_on_icon_name));
      }
      catch (NullPointerException e)
      {
         mMsgDocument.printWarning("WARNING: Failed to load icon " +
                                   bulb_on_icon_name + "\n");
      }

      try
      {
         mBulbOffIcon = new ImageIcon(BeanJarClassLoader.instance().getResource(bulb_off_icon_name));
      }
      catch (NullPointerException e)
      {
         mMsgDocument.printWarning("WARNING: Failed to load icon " +
                                   bulb_off_icon_name + "\n");
      }

      if ( mBulbOffIcon != null )
      {
         mStatusMsgButton.setPreferredSize(new Dimension(24, 24));
         mStatusMsgButton.setIcon(mBulbOffIcon);
      }
      else
      {
         mStatusMsgButton.setText("Expand");
      }

      mStatusMsgButton.addActionListener(new ActionListener()
         {
            public void actionPerformed (ActionEvent e)
            {
               statusMessageExpandAction(e);
            }
         });

      // Add the various components to their respective containers.
      mContentPane.add(mMainPanel, BorderLayout.CENTER);
      mContentPane.add(mStatusBar,  BorderLayout.SOUTH);
      mStatusBar.add(mStatusMsgButton,  BorderLayout.EAST);
      mStatusBar.add(mStatusMsgLabel,  BorderLayout.CENTER);
      mStatusBar.add(mProgressBar, BorderLayout.WEST);
      mMainPanel.setDividerLocation(500);
   }

   private void setMnemonics()
   {
      mMenuNetConnect.setMnemonic('C');
      mMenuNetDisconnect.setMnemonic('D');
      mMenuEditPrefsBean.setMnemonic('B');
      mMenuBeansLoad.setMnemonic('L');
      mMenuBeansStatus.setMnemonic('S');
      mMenuHelpAbout.setMnemonic('A');
      mMenuFileOpen.setMnemonic('O');
      mMenuFileClose.setMnemonic('C');
      mMenuFileQuit.setMnemonic('Q');
      mMenuFile.setMnemonic('F');
      mMenuFileSave.setMnemonic('S');
      mMenuEdit.setMnemonic('E');
      mMenuNetwork.setMnemonic('N');
      mMenuBeans.setMnemonic('B');
      mMenuHelp.setMnemonic('H');
   }

   // ========================================================================
   // Private methods.
   // ========================================================================

   /**
    * File | Open action performed.
    */
   private void fileOpenAction(ActionEvent e)
   {
      if ( null != mFileLoader )
      {
         if ( mFileLoader.openRequested() )
         {
            fileOpenPerformed(new FileActionEvent(mFileLoader));
         }
      }
   }

   /**
    * File | Save action performed.
    */
   private void fileSaveAction(ActionEvent e)
   {
      if ( mFileLoader.saveRequested() )
      {
         fileSavePerformed(new FileActionEvent(mFileLoader));
      }
   }

   /**
    * File | Save As action performed.
    */
   private void fileSaveAsAction(ActionEvent e)
   {
      if ( mFileLoader.saveAsRequested() )
      {
         fileSaveAsPerformed(new FileActionEvent(mFileLoader));
      }
   }

   /**
    * File | Save All action performed.
    */
   private void fileSaveAllAction(ActionEvent e)
   {
      if ( mFileLoader.saveAllRequested() )
      {
         fileSaveAllPerformed(new FileActionEvent(mFileLoader));
      }
   }

   /**
    * File | Close action performed.
    */
   private void fileCloseAction(ActionEvent e)
   {
      if ( mFileLoader.closeRequested() )
      {
         fileClosePerformed(new FileActionEvent(mFileLoader));
      }
   }

   /**
    * File | Quit action performed.
    */
   private boolean fileQuitAction(ActionEvent e)
   {
      boolean should_quit =
         fireFrameClosing(new TweekFrameEvent(this,
                                              WindowEvent.WINDOW_CLOSING)); 

      if ( should_quit )
      {
         shutdown();
      }

      return should_quit;
   }

   /**
    * Edit | Undo action performed.
    */
   private void editUndoAction(ActionEvent e)
   {
      mUndoHandler.undoRequested();
      UndoManager mgr = mUndoHandler.getUndoManager();

      if ( null == mgr )
      {
         mMenuEditUndo.setEnabled(false);
         mMenuEditRedo.setEnabled(false);
      }
      else
      {
         mMenuEditUndo.setEnabled(mgr.canUndo());
         mMenuEditRedo.setEnabled(mgr.canRedo());
      }
   }

   /**
    * Edit | Redo action performed.
    */
   private void editRedoAction(ActionEvent e)
   {
      mUndoHandler.redoRequested();
      UndoManager mgr = mUndoHandler.getUndoManager();

      if ( null == mgr )
      {
         mMenuEditUndo.setEnabled(false);
         mMenuEditRedo.setEnabled(false);
      }
      else
      {
         mMenuEditUndo.setEnabled(mgr.canUndo());
         mMenuEditRedo.setEnabled(mgr.canRedo());
      }
   }

   /**
    * Edit | Cut action performed.
    */
   private void editCutAction(ActionEvent e)
   {
      mClipboardUser.cutRequested();
   }

   /**
    * Edit | Copy action performed.
    */
   private void editCopyAction(ActionEvent e)
   {
      mClipboardUser.copyRequested();
   }

   /**
    * Edit | Paste action performed.
    */
   private void editPasteAction(ActionEvent e)
   {
      mClipboardUser.pasteRequested();
   }

   /**
    * Network | Connect action performed.
    */
   private void networkConnectAction (ActionEvent e)
   {
      ConnectionDialog dialog = new ConnectionDialog(this, "ORB Connections");
      dialog.setVisible(true);

      if ( dialog.getStatus() == ConnectionDialog.OK_OPTION )
      {
         CorbaService corba_service = dialog.getCorbaService();

         if ( null != corba_service &&
              null != corba_service.getSubjectManager() )
         {
            mORBs.add(corba_service);
            mBeanContainer.fireConnectionEvent(corba_service);
            mMenuNetDisconnect.setEnabled(true);
         }
      }
   }

   /**
    * Network | Disconnect action performed.
    */
   private void networkDisconnectAction(ActionEvent e)
   {
      DisconnectionDialog dialog =
         new DisconnectionDialog(this, "Disconnect from CORBA Service", mORBs);
      dialog.setVisible(true);

      if ( dialog.getStatus() == DisconnectionDialog.DISCONNECT_OPTION )
      {
         try
         {
            CorbaService selected_orb = dialog.getSelectedCorbaService();

            // Tell the Bean container that we are disconnecting from the active
            // ORB, and then take steps to shut down that connection.
            mBeanContainer.fireDisconnectionEvent(selected_orb);
            mORBs.remove(selected_orb);

            // Do not wait for the ORB to shut down.
            selected_orb.shutdown(false);

            // If there are no available ORBs, disable the "disconnect" menu
            // item.
            if ( mORBs.size() == 0 )
            {
               mMenuNetDisconnect.setEnabled(false);
            }
         }
         catch (Exception ex)
         {
            ex.printStackTrace();
         }
      }
   }

   /**
    * Opens a dialog box used for editing the user's global preferences
    * visually.
    */
   private void editGlobalPrefs(ActionEvent e)
   {
      try
      {
         GlobalPreferencesService prefs = new GlobalPreferencesServiceProxy();

         // Save this for later.
         int old_level = prefs.getUserLevel();

         PrefsDialog dialog = new PrefsDialog(this, "Global Preferences",
                                              prefs);
         dialog.addGlobalPrefsUpdateListener(this);
         dialog.setVisible(true);
      }
      catch(Exception ex)
      {
         // There is no need to do anything here.  If the GlobalPreferences
         // Bean is not available, the menu option will be disabled, thus
         // preventing this method from ever being executed.
      }
   }

   private void editBeanPrefs(ActionEvent e)
   {
      mBeanPrefsDialog.setLocationRelativeTo(this);
      mBeanPrefsDialog.setVisible(true);
   }

   private void beansLoadAction(ActionEvent e)
   {
      JFileChooser chooser = new JFileChooser();
      chooser.setMultiSelectionEnabled(true);
      chooser.setDialogTitle("Tweek Bean Finder");
      chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

      ExtensionFileFilter filter = new ExtensionFileFilter("Bean XML Files");
      filter.addExtension("xml");
      chooser.addChoosableFileFilter(filter);

      int status = chooser.showOpenDialog(this);

      if ( status == JFileChooser.APPROVE_OPTION )
      {
         java.io.File[] files = chooser.getSelectedFiles();

         if ( files.length > 0 )
         {
            for ( int i = 0; i < files.length; i++ )
            {
               String path = files[i].getAbsolutePath();
               loadBeansFromPath(path);
            }
         }
      }
   }

   private void beansStatusAction(ActionEvent e)
   {
      BeanStatusDialog dialog = new BeanStatusDialog(this, "Bean Status");
      dialog.setVisible(true);
   }  

   private void loadBeansFromPath (String path)
   {
      try
      {
         TweekCore.instance().findAndLoadBeans( path );
      }
      catch (BeanPathException path_ex)
      {
         JOptionPane.showMessageDialog(null, "Invalid Bean XML path '" + path + "'",
                                       "Bad Bean Path",
                                       JOptionPane.ERROR_MESSAGE);
      }
   }

   /**
    * Help | About action performed.
    */
   private void helpAboutAction(ActionEvent e)
   {
      AboutBox dlg = new AboutBox(this);
      dlg.setModal(true);
      dlg.setVisible(true);
   }

   /**
    * Help | Bean Help action performed.
    */
   private void beanHelpAction(ActionEvent e)
   {
      if ( mHelpProvider != null )
      {
         mHelpProvider.helpRequested();
      }
   }

   private void statusMessageExpandAction (ActionEvent e)
   {
      if ( mMsgPanelExpanded )
      {
         mMainPanel.setBottomComponent(null);
         mMainPanel.resetToPreferredSizes();
         mMsgPanelExpanded = false;

         mStatusMsgLabel.setText("");

         if ( mStatusMsgButton.getIcon() == null )
         {
            mStatusMsgButton.setText("Expand");
         }
      }
      else
      {
         mMainPanel.setBottomComponent(mMessagePanel);
         mMainPanel.setDividerLocation(0.85);
         mMsgPanelExpanded = true;

         if ( mBulbOffIcon != null )
         {
            mStatusMsgButton.setIcon(mBulbOffIcon);
         }
         else
         {
            mStatusMsgButton.setText("Collapse");
            mStatusMsgButton.setForeground(Color.black);
         }
      }
   }

   /**
    * Disables the menu items in the File menu related to handling of data
    * files.  This effectively resets the menu items to their state before any
    * Beans were loaded in the GUI.
    */
   private void disableFileHandlingItems()
   {
      mFileLoader = null;
      mMenuFileOpen.setText("Open ...");
      mMenuFileOpen.setEnabled(false);
      mMenuFileSave.setEnabled(false);
      mMenuFileClose.setText("Close");
      mMenuFileClose.setEnabled(false);
   }

   private void disableClipboardItems()
   {
      mClipboardUser = null;
      mMenuEditCut.setEnabled(false);
      mMenuEditCopy.setEnabled(false);
      mMenuEditPaste.setEnabled(false);
   }

   private void disableUndoHandlerItems()
   {
      mUndoHandler = null;
      mMenuEditUndo.setEnabled(false);
      mMenuEditRedo.setEnabled(false);
   }

   /**
    * Disables the Bean-specific menu items in the Help menu related to
    * providing Bean-specific help.  This effectively resets the menu items to
    * their state before any Beans were loaded in the GUI.
    */
   private void disableHelpProvidingItems()
   {
      mHelpProvider = null;
      mMenuHelpBean.setText("Bean Help");
      mMenuHelpBean.setEnabled(false);
   }

   // ========================================================================
   // Private data members.
   // ========================================================================

   private boolean mPackFrame = false;
   private EventListenerList mFrameListeners = new EventListenerList();
 
   // GUI objects.
   private JPanel        mContentPane       = null;    /**< Top-level container */
   private BorderLayout  mContentPaneLayout = new BorderLayout();
   private JSplitPane    mMainPanel         = new JSplitPane();
   private BeanContainer mBeanContainer     = new BeanContainer();
   private ViewerBean    mBeanViewer        = null;

   // Status bar stuff.
   private JPanel        mStatusBar        = new JPanel();
   private JProgressBar  mProgressBar      = new JProgressBar();
   private JLabel        mStatusMsgLabel   = new JLabel();
   private JButton       mStatusMsgButton  = new JButton();
   private BorderLayout  mStatusBarLayout  = new BorderLayout();
   private ImageIcon     mBulbOnIcon       = null;
   private ImageIcon     mBulbOffIcon      = null;
   private boolean       mMsgPanelExpanded = false;

   // Menu bar objects.
   private JMenuBar mMenuBar              = new JMenuBar();
   private JMenu mMenuFile                = new JMenu();
   private JMenuItem mMenuFileOpen        = new JMenuItem();
   private JMenuItem mMenuFileSave        = new JMenuItem();
   private JMenuItem mMenuFileSaveAs      = new JMenuItem();
   private JMenuItem mMenuFileSaveAll     = new JMenuItem();
   private JMenuItem mMenuFileClose       = new JMenuItem();
   private JMenuItem mMenuFileQuit        = new JMenuItem();
   private JMenu mMenuEdit                = new JMenu();
   private JMenuItem mMenuEditUndo        = new JMenuItem();
   private JMenuItem mMenuEditRedo        = new JMenuItem();
   private JMenuItem mMenuEditCut         = new JMenuItem();
   private JMenuItem mMenuEditCopy        = new JMenuItem();
   private JMenuItem mMenuEditPaste       = new JMenuItem();
   private JMenuItem mMenuEditPrefsGlobal = new JMenuItem();
   private JMenuItem mMenuEditPrefsBean   = new JMenuItem();
   private JMenu mMenuNetwork             = new JMenu();
   private JMenuItem mMenuNetConnect      = new JMenuItem();
   private JMenuItem mMenuNetDisconnect   = new JMenuItem();
   private JMenu mMenuBeans               = new JMenu();
   private JMenuItem mMenuBeansLoad       = new JMenuItem();
   private JMenuItem mMenuBeansStatus     = new JMenuItem();
   private JMenu mMenuHelp                = new JMenu();
   private JMenuItem mMenuHelpAbout       = new JMenuItem();
   private JMenuItem mMenuHelpBean        = new JMenuItem();

   // Networking stuff.
   private Vector mORBs = new Vector();

   private MessagePanel    mMessagePanel    = null;
   private MessageDocument mMsgDocument     = null;
   private FileLoader      mFileLoader      = null;
   private ClipboardUser   mClipboardUser   = null;
   private HelpProvider    mHelpProvider    = null;
   private UndoHandler     mUndoHandler     = null;
   private BeanPrefsDialog mBeanPrefsDialog = null;

   private static boolean mMacOS =
      System.getProperty("os.name").toLowerCase().startsWith("mac os x");
   private Object mMacAppListener = null;
}
