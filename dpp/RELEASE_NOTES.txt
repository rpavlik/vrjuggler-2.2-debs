                            Doozer++ Release Notes
                            ----------------------

For all versions:

    - See the ChangeLog for more system-level changes that do not directly
      affect applications.

===============================================================================

 Version: 2.1.0
Released: April 14, 2006

    Differences from 2.0:
        * Static and shared library naming is left up to user-level
          makefiles instead of being dictated by dpp.libs.targets.mk.
          To update, the assignment of $(STATIC_LIBS) and $(DYNAMIC_LIBS)
          would change as follows:

          Doozer++ 2.0 version
          --------------------
          LIBS=		mylib1 mylib2
          STATIC_LIBS=	mylib1.$(STATICLIB_EXT) mylib2.$(STATICLIB_EXT)
          DYNAMIC_LIBS=	mylib1.$(DYNAMICLIB_EXT) mylib2.$(DYNAMICLIB_EXT)

          Doozer++ 2.1 version
          --------------------
          LIBS=		mylib1 mylib2
          STATIC_LIBS=	$$LIB.$(STATICLIB_EXT)
          DYNAMIC_LIBS=	$$LIB.$(DYNAMICLIB_EXT)

	  This allows for user-level makefiles to set up arbitrary naming
	  conventions, including the use of versioning in any manner
	  desired.

        * The tests for OpenAL and ALUT have been separated into
          DPP_HAVE_OPENAL and DPP_HAVE_ALUT.

 Version: 2.0.0
Released: February 16, 2005

    Differences from 1.x:
        * Command-line arguments such as --with-oglroot in Doozer++ 1.x are
          now named --with-opengl.  This naming convention is more obvious
          and follows the conventions used by other configure scripts.

    Required changes when upgrading from 1.x:
        * To detect macros for third-party packages, the include path given
          to Aclocal must be extended to include the directory
          $(DPP_PATH)/config/pkgs (where $DPP_PATH is the root directory
          of the Doozer++ installation).
        * The DPP_SYSTEM_SETUP() macro that was deprecated in version 1.5.0
          has been removed.
        * DPP_SETUP_COMPILER() is no longer called automatically by
          DPP_PROG_CC() and DPP_PROG_CXX().  Instead, DPP_SETUP_COMPILER()
          should be called by user code after determining what compiler(s)
          to use.

 Version: 1.5.0
Released: September 8, 2002

    New features:
        * The character for separating components of the Java classpath
          (as specified using the -classpath argument to java) is now named
          in the variable $(JCPS).  On UNIX-based systems, the value is :,
          and on Win32, it is ;.

    Bugs fixed:
        * The order of preference for finding a JDK installation has changed
          so that command-line options and environment variables override
          what might be found just by searching the user's path.  The new
          order is:

             1. Search path given on the command line (--with-jdkhome)
             2. Search in the path(s) given as arguments to this macro
             3. Search in $JDK_HOME (if it is set)
             4. Search in the user's path
             5. Search in a preset list of common locations

    Required changes when upgrading from 1.4.x:
        * The targets for building shared libraries (DLLs) have been renamed
          for the sake of clarity.  The name changes are as follows:

              ddso         --> dbg-dso
              dso          --> opt-dso
              install-ddso --> install-dbg-dso
              install-dso  --> install-opt-dso

        * DPP_NSPR_VER now takes four arguments instead of three.  The
          argument new usage is:

              DPP_NSPR_VER(nspr-root, nspr-inc, version [, action-if-not-found])

          This differs from Doozer++ 1.4 by the second argument, nspr-inc.
          The new argument specifies the path to the NSPR headers.  For a
          quick update, just use the value of nspr-root with "/include"
          appended.
