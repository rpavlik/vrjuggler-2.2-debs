# Doozer++ is (C) Copyright 2000-2009 by Iowa State University
# Distributed under the GNU Lesser General Public License 2.1.  (See
# accompanying file COPYING.txt or http://www.gnu.org/copyleft/lesser.txt)
#
# Original Author:
#   Patrick Hartling

# =============================================================================
# This file <common.defs.mk> provides variable assignments based on the
# results of running a Doozer++-aware configure script.  It is distributed
# with Doozer++ as a means for users to get quick, effortless access to all
# these variables.  It is recommended that user build systems include this
# file in their own local definitions file and override settings therein as
# necessary.
#
# All makefiles in a source tree should include this file through some means
# for maximum information sharing.
#
# Generated for use on @PLATFORM@
# -----------------------------------------------------------------------------
# Variables defined here are:
#
# bindir             - Path to bin directory containing executables (usually
#                      $(exec_prefix)/bin).
# datadir            - Path to a directory generally sharing
#                      platform-independent data (usually $(prefix)/share).
# exec_prefix        - Path to base directory where executables will be
#                      (usually $(prefix)).
# libdir             - Path to directory containing shared and static libraries
#                      (usually $(exec_prefix)/lib).
# libexecdir         - Path to libexec directory that generally contains
#                      executables not called directly by users (usually
#                      $(exec_prefix)/libexec).
# prefix             - Base path used for installation and other things.
# sbindir            - Path to sbin directory containing executables (usually
#                      $(exec_prefix)/sbin).
# sysconfdir         - System configuration directory (usually $(prefix)/etc).
# topdir             - The top of the build tree.
#
# AR                 - Path to ar(1) (or equivalent program).
# ARFLAGS            - Flags for $(AR).
# CC                 - Path to C compiler.
# CXX                - Path to C++ compiler.
# CPP                - Command for invoking the C preprocessor.
# CXXCPP             - Command for invoking the C preprocessor used by the C++
#                      compiler.
# CFLAGS             - Flags for $(CC).
# CFLAGS_DYNLIB      - Special flags used only when building dynamically linked
#                      libraries with the C compiler.
# CC_PROF_FLAGS      - Flag(s) to enable compiling profiled C object files.
# CPPFLAGS           - Flags for $(CPP) and $(CXXCPP).
# CXXFLAGS           - Flags for $(CXX).
# CXXFLAGS_DYNLIB    - Special flags used only when building dynamically linked
#                      libraries with the C++ compiler.
# CXX_PROF_FLAGS     - Flag(s) to enable compiling profiled C++ object files.
# C_DLL              - Command for linking a DLL from C object files.
# CXX_DLL            - Command for linking a DLL from C++ object files.
# C_PLUGIN           - Command for linking a plug-in from C object files.
# CXX_PLUGIN         - Command for linking a plug-in from C++ object files.
# DEFS               - Command-line preprocessor definitions
#                      (-Dvariable=value).
# DEP_GEN_FLAG       - Flag passed to the compiler to generate dependencies.
# DEPEND_FLAGS       - Flags passed to makedepend(1) (or equivalent program for
#                      generating dependencies).
# DEPEND_EXTRAS      - Flags not recognized by makedepend(1) that may be
#                      necessary in $(CFLAGS) or $(CXXFLAGS).
# OWNER_NAME         - The name of the user that will own the files.
# GROUP_NAME         - The name of the group that will own the files.
# FILE_PERMS         - Normal file permissions.
# EXEC_PERMS         - Executable file permissions.
# DIR_PERMS          - Directory permissions.
# DYLIB_NAME_FLAG    - Flag passed to the linker to name a dynamic library.
# EXEEXT             - Suffix for executable file names (e.g., ".exe" or
#                      nothing).
# EXE_NAME_FLAG      - Flag passed to the linker to name an executable file.
# INCLUDES           - Additions to the include path (-I/path/to/include).
# JCPS               - The Java classpath separator character for this
#                      platform.
# JAR                - Command for creating Java JAR files.
# JAVA               - The java command.
# JAVAC              - Java compiler.
# JAVADOC            - Java documentation generator.
# JAVAH              - javah utility.
# JAVAP              - javap utility.
# JDK_HOME           - Base Java installation directory.
# JNI_INC            - The include paths necessary for JNI.
# JNI_LDFLAGS        - The linker flags providing paths and other information
#                      for linking JNI code.
# JNI_LIB            - The library which needs to be linked for JNI code.
# LD                 - Path to ld(1) (or equivalent program).
# LDFLAGS            - Flags for $(LD).
# LDOPTS             - Extra, often platform-specific, options for the linker.
# LDOPTS_DBG         - Extra, often platform-specific, debugging options for
#                      the linker.
# LDOPTS_OPT         - Extra, often platform-specific, optimization options for
#                      the linker.
# LDOPTS_PROF        - Extra, often platform-specific, profiling options for
#                      the linker.
# LIBS               - Extra external libraries needed at link time.
# LN_S               - Working 'ln -s' command.
# MAKEDEPEND         - The makedepend(1) program (if needed).
# MKPATH             - Path to shared dpp.*.mk file directory.
# OBJC               - Path to Objective-C compiler.
# OBJCXX             - Path to Objective-C++ compiler.
# OBJCCPP            - Command for invoking the C preprocessor used by the
#                      Objective-C compiler.
# OBJCXXCPP          - Command for invoking the C preprocessor used by the
#                      Objective-C++ compiler.
# OBJCFLAGS          - Flags for $(OBJC).
# OBJCFLAGS_DYNLIB   - Special flags used only when building dynamically linked
#                      libraries with the Objective-C compiler.
# OBJC_PROF_FLAGS    - Flag(s) to enable compiling profiled Objective-C+=
#                      object files.
# OBJCXXFLAGS        - Flags for $(OBJCXX).
# OBJXXCFLAGS_DYNLIB - Special flags used only when building dynamically linked
#                      libraries with the Objective-C++ compiler.
# OBJCXX_PROF_FLAGS  - Flag(s) to enable compiling profiled Objective-C object
#                      files.
# OBJC_DLL           - Command for linking a DLL from Objective-C object files.
# OBJCXX_DLL         - Command for linking a DLL from Objective-C++ object
#                      files.
# OBJC_PLUGIN        - Command for linking a plug-in from Objective-C object
#                      files.
# OBJCXX_PLUGIN      - Command for linking a plug-in from Objective-C++ object
#                      files.
# OBJEXT             - Suffix for object file names (e.g., "o" or "obj").
# OBJ_BUILD_FLAG     - Flag passed to the compiler to create an object file.
# OBJ_NAME_FLAG      - Flag passed to the compiler to name an object file.
# OBJDIR             - Path to the directory where the object files will be
#                      built.
# OS_TYPE            - Type of the target operating system (UNIX or Win32).
# PERL               - Path to Perl 5 binary.
# RANLIB             - Path to ranlib(1) binary if it is available.  ':'
#                      otherwise.
# RMIC               - Java RMI compiler utility.
#
# C_WARNS_LEVEL_[0-5]      - Warning levels for C code.
# CXX_WARNS_LEVEL_[0-5]    - Warning levels for C++ code.
# OBJC_WARNS_LEVEL_[0-5]   - Warning levels for Objective-C code.
# OBJCXX_WARNS_LEVEL_[0-5] - Warning levels for Objective-C++ code.
#
# USE_MAKEDEPEND      - Tell the dependency-generation code whether to use
#                       makedepend(1).  The value will be either 'Y' or 'N'.
# USE_DPP_BSD_INSTALL - Indicate that the Doozer++ BSD-compatible install(1)
#                       script will be used.
#
# C_COMPILE       - Command for compiling C code.
# CXX_COMPILE     - Command for compiling C++ code.
# OBJC_COMPILE    - Command for compiling Objective-C code.
# OBJCXX_COMPILE  - Command for compiling Objective-C++ code.
#
# ABI             - Application Binary Interface type.  This may be used for
#                   other binary types when supported by the operating system
#                   (e.g., "ELF", "N32" or "64").
# ISA             - Instruction Set Architecture.  This may be used for other
#                   binary types when supported by the operating system (e.g.,
#                   "mips3" or "i386").
# LIBBITSUF       - Suffix for the library path used by the linker on IRIX
#                   only.  For n32 binaries, it will be 32.  For 64-bit
#                   binaries, it will be 64.
# PLATFORM        - The operating system abbreviation on which the library is
#                   being built.
# =============================================================================

# -----------------------------------------------------------------------------
# Base variables needed by all makefiles.
# -----------------------------------------------------------------------------
bindir=			@bindir@
datadir=		@datadir@
exec_prefix=		@exec_prefix@
libdir=			@libdir@
libexecdir=		@libexecdir@
prefix=			@prefix@
sbindir=		@sbindir@
sysconfdir=		@sysconfdir@
topdir=			@topdir@

AR=			@AR@ $(DPP_EXTRA_ARFLAGS) $(EXTRA_ARFLAGS) $(ARFLAGS)
ARFLAGS=		@ARFLAGS@
AR_NAME_FLAG=		@AR_NAME_FLAG@
CC=			@CC@
CXX=			@CXX@
CPP=			@CPP@
CXXCPP=			@CXXCPP@
CFLAGS=			@CFLAGS@ $(OPTIMIZER) $(EXTRA_CFLAGS)
CFLAGS_DYNLIB=		@CFLAGS_DYNLIB@
CC_PROF_FLAGS=		@CC_PROF_FLAGS@
CPPFLAGS=		@CPPFLAGS@ $(EXTRA_CPPFLAGS)
CXXFLAGS_DYNLIB=	@CXXFLAGS_DYNLIB@
CXX_PROF_FLAGS= 	@CXX_PROF_FLAGS@
C_DLL=			@C_DLL@ $(DPP_EXTRA_LDFLAGS) $(EXTRA_LDFLAGS)
CXX_DLL=		@CXX_DLL@ $(DPP_EXTRA_LDFLAGS) $(EXTRA_LDFLAGS)
C_PLUGIN=		@C_PLUGIN@ $(DPP_EXTRA_LDFLAGS) $(EXTRA_LDFLAGS)
CXX_PLUGIN=		@CXX_PLUGIN@ $(DPP_EXTRA_LDFLAGS) $(EXTRA_LDFLAGS)
DEFS=			@DEFS@ $(EXTRA_DEFS)
DEP_GEN_FLAG=		@DEP_GEN_FLAG@
DEPEND_FLAGS=		@DEPEND_FLAGS@ $(INCLUDES) $(EXTRA_DEPEND_FLAGS)
DEPEND_EXTRAS=		@DEPEND_EXTRAS@ $(DEFS)
DYLIB_NAME_FLAG=	@DYLIB_NAME_FLAG@
EXEEXT=			@EXEEXT@
EXE_NAME_FLAG=		@EXE_NAME_FLAG@
INCLUDES=		@INCLUDES@ -I$(topdir) $(EXTRA_INCLUDES)
INSTALL=		@INSTALL@
JCPS=			@JCPS@
JAR=			@JAR@
JAVA=			@JAVA@
JAVAC=			@JAVAC@
JAVADOC=		@JAVADOC@
JAVAH=			@JAVAH@
JAVAP=			@JAVAP@
JDK_HOME=		@JDK_HOME@
JNI_INC=		@JNI_INC@
JNI_LDFLAGS=		@JNI_LDFLAGS@
JNI_LIB=		@JNI_LIB@
LD=			@LD@ $(DPP_EXTRA_LDFLAGS) $(EXTRA_LDFLAGS)
LDFLAGS=		@LDFLAGS@ -L/usr/lib$(LIBBITSUF) -L/usr/lib
LDOPTS=			@LDOPTS@ $(DPP_EXTRA_LDOPTS) $(EXTRA_LDOPTS)	\
			$(DSOVERSIONOPTS)
LDOPTS_DBG=		@LDOPTS_DBG@ $(EXTRA_LDOPTS_DBG)
LDOPTS_OPT=		@LDOPTS_OPT@ $(EXTRA_LDOPTS_OPT)
LDOPTS_PROF=		@LDOPTS_PROF@ $(EXTRA_LDOPTS_PROF)
LIBS=			@LIBS@ $(EXTRA_LIBS)
LN_S=			@LN_S@
MAKEDEPEND=		@MAKEDEPEND@
MKPATH?=		
OBJC=			@OBJC@
OBJCFLAGS=		@CFLAGS@ $(OPTIMIZER) $(EXTRA_OBJCFLAGS)
OBJCFLAGS_DYNLIB=	@OBJCFLAGS_DYNLIB@
OBJC_DLL=		@OBJC_DLL@ $(DPP_EXTRA_LDFLAGS) $(EXTRA_LDFLAGS)
OBJC_PLUGIN=		@OBJC_PLUGIN@ $(DPP_EXTRA_LDFLAGS) $(EXTRA_LDFLAGS)
OBJC_PROF_FLAGS=	@OBJC_PROF_FLAGS@
OBJCPP=			@OBJCPP@
OBJCXX=			@OBJCXX@
OBJCXXFLAGS=		@OBJCXXFLAGS@ $(OPTIMIZER) $(EXTRA_OBJCXXFLAGS)
OBJCXXFLAGS_DYNLIB=	@OBJCXXFLAGS_DYNLIB@
OBJCXX_DLL=		@OBJCXX_DLL@ $(DPP_EXTRA_LDFLAGS) $(EXTRA_LDFLAGS)
OBJCXX_PLUGIN=		@OBJCXX_PLUGIN@ $(DPP_EXTRA_LDFLAGS) $(EXTRA_LDFLAGS)
OBJCXX_PROF_FLAGS= 	@OBJCXX_PROF_FLAGS@
OBJCXXCPP=		@OBJCXXCPP@
OBJEXT=			@OBJEXT@
OBJ_BUILD_FLAG=		@OBJ_BUILD_FLAG@
OBJ_NAME_FLAG=		@OBJ_NAME_FLAG@
OS_TYPE=		@OS_TYPE@
PERL=			@PERL@
RANLIB=			@RANLIB@
RMIC=			@RMIC@

# Warning levels for C, C++, Objective-C, and Objective-C++ needed by
# dpp.obj-common.mk.
C_WARNS_LEVEL_0=	@C_WARNS_LEVEL_0@
C_WARNS_LEVEL_1=	@C_WARNS_LEVEL_1@
C_WARNS_LEVEL_2=	@C_WARNS_LEVEL_2@
C_WARNS_LEVEL_3=	@C_WARNS_LEVEL_3@
C_WARNS_LEVEL_4=	@C_WARNS_LEVEL_4@
C_WARNS_LEVEL_5=	@C_WARNS_LEVEL_5@
CXX_WARNS_LEVEL_0=	@CXX_WARNS_LEVEL_0@
CXX_WARNS_LEVEL_1=	@CXX_WARNS_LEVEL_1@
CXX_WARNS_LEVEL_2=	@CXX_WARNS_LEVEL_2@
CXX_WARNS_LEVEL_3=	@CXX_WARNS_LEVEL_3@
CXX_WARNS_LEVEL_4=	@CXX_WARNS_LEVEL_4@
CXX_WARNS_LEVEL_5=	@CXX_WARNS_LEVEL_5@
OBJC_WARNS_LEVEL_0=	@OBJC_WARNS_LEVEL_0@
OBJC_WARNS_LEVEL_1=	@OBJC_WARNS_LEVEL_1@
OBJC_WARNS_LEVEL_2=	@OBJC_WARNS_LEVEL_2@
OBJC_WARNS_LEVEL_3=	@OBJC_WARNS_LEVEL_3@
OBJC_WARNS_LEVEL_4=	@OBJC_WARNS_LEVEL_4@
OBJC_WARNS_LEVEL_5=	@OBJC_WARNS_LEVEL_5@
OBJCXX_WARNS_LEVEL_0=	@OBJCXX_WARNS_LEVEL_0@
OBJCXX_WARNS_LEVEL_1=	@OBJCXX_WARNS_LEVEL_1@
OBJCXX_WARNS_LEVEL_2=	@OBJCXX_WARNS_LEVEL_2@
OBJCXX_WARNS_LEVEL_3=	@OBJCXX_WARNS_LEVEL_3@
OBJCXX_WARNS_LEVEL_4=	@OBJCXX_WARNS_LEVEL_4@
OBJCXX_WARNS_LEVEL_5=	@OBJCXX_WARNS_LEVEL_5@

# SGI-specific dynamic-shared-object information.
DSOREGFILE=		@DSOREGFILE@
DSOVERSION=		@DSOVERSION@
DSOVERSIONOPTS=		@DSOVERSIONOPTS@

USE_MAKEDEPEND=		@USE_MAKEDEPEND@
USE_DPP_BSD_INSTALL=    @USE_DPP_BSD_INSTALL@

# Installation information (permissions, ownership).
OWNER_NAME=		@OWNER_NAME@
GROUP_NAME=		@GROUP_NAME@
FILE_PERMS=		@FILE_PERMS@
EXEC_PERMS=		@EXEC_PERMS@
DIR_PERMS=		@DIR_PERMS@

# Allow overriding the default value of $(OBJDIR) by setting $(BASE_OBJDIR)
# (probably using an externally defined value).
ifdef BASE_OBJDIR
   OBJDIR=		$(BASE_OBJDIR)
else
   OBJDIR=		.
endif

# -----------------------------------------------------------------------------
# Compiler command lines.
# -----------------------------------------------------------------------------
C_COMPILE=		$(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS)		\
			$(CFLAGS) $(C_WARN_FLAGS)
CXX_COMPILE=		$(CXX) $(DEFS) $(INCLUDES) $(CPPFLAGS)		\
			$(CXXFLAGS) $(CXX_WARN_FLAGS)
OBJC_COMPILE=		$(OBJC) $(DEFS) $(INCLUDES) $(CPPFLAGS)		\
			$(OBJCFLAGS) $(OBJC_WARN_FLAGS)
OBJCXX_COMPILE=		$(OBJCXX) $(DEFS) $(INCLUDES) $(CPPFLAGS)	\
			$(OBJCXXFLAGS) $(OBJCXX_WARN_FLAGS)

# -----------------------------------------------------------------------------
# Platform- and binary-specific options.  The assignments preceding the
# ifeq ... endif blocks are the default values.  Depending on the value of
# $(ABI), further settings may be made to allow for building with multiple
# ABIs.
# -----------------------------------------------------------------------------
ifdef dppABI
   ifeq ($(dppABI), N32_M3)
      ABI=	N32
      ISA=	mips3
   endif
   ifeq ($(dppABI), N32_M4)
      ABI=	N32
      ISA=	mips4
   endif
   ifeq ($(dppABI), 64_M3)
      ABI=	64
      ISA=	mips3
   endif
   ifeq ($(dppABI), 64_M4)
      ABI=	64
      ISA=	mips4
   endif
   ifeq ($(dppABI), ELF_i386)
      ABI=	ELF
      ISA=	i386
   endif
   ifeq ($(dppABI), MACINTOSH_PPC)
      ABI=	MAC
      ISA=	powerpc
   endif
else
   ABI?=	@ABI@
   ISA?=	@ISA@
   LIBBITSUF?=	@LIBBITSUF@
endif

ABI_LIST=	@ABI_LIST@
PLATFORM=	@PLATFORM@

ifneq ($(findstring gcc, $(CC)), gcc)
ifeq ($(ABI), N32)
   ARFLAGS:=	-n32 $(ARFLAGS)
   CFLAGS+=	-n32
   CXXFLAGS+=	-n32
   LDOPTS+=	-n32
   LIBBITSUF=	32
endif
ifeq ($(ABI), 64)
   ARFLAGS:=	-64 $(ARFLAGS)
   CFLAGS+=	-64
   CXXFLAGS+=	-64
   LDOPTS+=	-64
   LIBBITSUF=	64
endif
ifeq ($(ABI), HP64)
   CFLAGS+=	+DD64
   CXXFLAGS+=	+DD64
   LDOPTS+=	+DD64
   LIBBITSUF=	/pa20_64
endif
ifeq ($(ABI), ELF)
   LIBBITSUF=	
endif

ifeq ($(ISA), mips3)
   ARFLAGS:=	-mips3 $(ARFLAGS)
   CFLAGS+=	-mips3
   CXXFLAGS+=	-mips3
   LDOPTS+=	-mips3
endif
ifeq ($(ISA), mips4)
   ARFLAGS:=	-mips4 $(ARFLAGS)
   CFLAGS+=	-mips4
   CXXFLAGS+=	-mips4
   LDOPTS+=	-mips4
endif

# Using GCC.
else

ifeq ($(ABI), ELF)
   ifeq ($(ISA), i386)
      CFLAGS+=		-m32
      CXXFLAGS+=	-m32
      LDOPTS+=		-m32
   endif
   ifeq ($(ISA), x86_64)
      CFLAGS+=		-m64
      CXXFLAGS+=	-m64
      LDOPTS+=		-m64
   endif
endif
ifeq ($(ABI), Mach-O)
   ifeq ($(ISA), powerpc)
      CFLAGS+=		-arch ppc $(PLATFORM_SDK)
      CXXFLAGS+=	-arch ppc $(PLATFORM_SDK)
      LDOPTS+=		-arch ppc $(PLATFORM_SDK)
   endif
   ifeq ($(ISA), i386)
      CFLAGS+=		-arch i386 $(PLATFORM_SDK)
      CXXFLAGS+=	-arch i386 $(PLATFORM_SDK)
      LDOPTS+=		-arch i386 $(PLATFORM_SDK)
   endif
   ifeq ($(ISA), x86_64)
      CFLAGS+=		-arch x86_64 $(PLATFORM_SDK)
      CXXFLAGS+=	-arch x86_64 $(PLATFORM_SDK)
      LDOPTS+=		-arch x86_64 $(PLATFORM_SDK)
   endif
   ifeq ($(ISA), universal)
      CFLAGS+=		$(foreach arch,$(UNIVERSAL_ARCH_LIST),-arch $(arch)) \
			$(PLATFORM_SDK)
      CXXFLAGS+=	$(foreach arch,$(UNIVERSAL_ARCH_LIST),-arch $(arch)) \
			$(PLATFORM_SDK)
      LDOPTS+=		$(foreach arch,$(UNIVERSAL_ARCH_LIST),-arch $(arch)) \
			$(PLATFORM_SDK)
   endif
endif

endif

@SET_MAKE@
